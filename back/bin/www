#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('back:server');
var http = require('http');
const Messages = require('../modules/chat');
// const allUsers  = []; // to push all concting users;
const users = {};

var UsersSchema = require('../modules/users');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
var server = http.createServer(app);
const io = require('socket.io').listen(server);

// socket io connect
io.on('connection',(socket)=>{
  // to get all users concting
  socket.on('send messages id', (data)=>{
    console.log(data)
    var fromId = data.fromId ,
        toId   = data.toId;
    Messages.find({}, (err, allChat)=>{
      if (err) {
        console.log(err)
      }else{
        var chat = allChat.find((chatId)=>{return chatId.chatName === fromId + toId || chatId.chatName === toId + fromId})
        if (chat) {
          var x = [] = chat.chatMessages.sort(function(a,b){
            return new Date(a.createdAt - new Date(b.createdAt)  );
          })
          // x.slice(-5)
          users[data.fromId].emit('load old chat', {success:true, data:x})
        }
      }
    })
  })
  socket.on('new user', (data)=>{
    if(data._id in users){
      return false;
    }else{
      socket.username = data._id;
      users[socket.username] = socket;
      updateUsername();
    }
    console.log(data)
  })// to get all users concting

socket.on('send message', (data)=>{
  var fromId  = data.fromId,
      toId    = data.toId;
  if (toId in users) {
        Messages.find({}, (err, chat)=>{
      if(err){
        console.log(err)
      }else{
        if (chat.length == 0) {
            var newChatMessages = new Messages({
              chatName:fromId + toId,
              chatMessages:{
                username:data.username,
                body:data.body
              }
            })
            Messages.create(newChatMessages, (err, messages)=>{
              if(err){
                console.log(err.message)
              }else{
                console.log(data)
                users[toId].emit('privetMessage', {success:true, data:data})
              }
            })
        }else{
          var messages = chat.find((chatId)=>{return chatId.chatName === fromId + toId || chatId.chatName === toId + fromId})
          if (messages) {
            messages.chatMessages.push({
              username:data.username,
              body:data.body
            })
            messages.save((err)=>{
              if (err) {
                console.log(err.message)
              }else{
                users[toId].emit('privetMessage', {success:true, data:data})
              }
            })

          }
          if(!messages){
            var newChatMessages = new Messages({
              chatName:fromId + toId,
              chatMessages:{
                username:data.username,
                body:data.body
              }
            })
            Messages.create(newChatMessages, (err, messages)=>{
              if(err){
                console.log(err.message)
              }else{
                users[toId].emit('privetMessage', {success:true, data:data})
              }
            })
          }
        }
      }
    })
  }else{
    Messages.find({}, (err, chat)=>{
      if(err){
        console.log(err)
      }else{
        var chatName = chat.find((chatId)=>{return chatId.chatName === fromId + toId || chatId.chatName === toId + fromId})
          if (chatName) {
            chatName.chatMessages.push({
              username:data.username,
              body:data.body
            })
            chatName.save((err)=>{
              if (err) {
                console.log(err.message)
              }else{
                console.log('message ar sended')
                // users[data.toId].emit('privetMessage', {data:data})
              }
            })
          }
          if(!chatName){
            var newChatMessages = new Messages({
              chatName:fromId + toId,
              chatMessages:{
                username:data.username,
                body:data.body
              }
            })
            Messages.create(newChatMessages, (err, messages)=>{
              if(err){
                console.log(err.message)
              }else{
                console.log('created')
                // users[data.toId].emit('privetMessage', {body:data})
              }
            })
          }
        }
    })
  }
})

// if user disconncting
socket.on('disconnect', ()=>{
  if (!socket.username)  return;
  delete users[socket.username];
  updateUsername();
})// if user dis conncting

// that function to make users updated
  function updateUsername(){
    io.sockets.emit('usersNames', {success:true, users:Object.keys(users)})
  }// that function to make users updated

})// end io connction


server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
